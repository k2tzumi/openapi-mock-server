openapi: 3.0.0
info:
  title: Pet Store API
  version: 1.0.0
  description: A simple pet store API for testing

servers:
  - url: http://localhost:7070
    description: Local mock server

paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              examples:
                example1:
                  value:
                    - id: 1
                      name: Fluffy
                      type: cat
                      age: 3
                    - id: 2
                      name: Max
                      type: dog
                      age: 5

    post:
      summary: Create a new pet
      operationId: createPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 3
                name: Buddy
                type: dog
                age: 2

  /pets/{petId}:
    get:
      summary: Get a pet by ID
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                cat:
                  value:
                    id: 1
                    name: Fluffy
                    type: cat
                    age: 3
                dog:
                  value:
                    id: 2
                    name: Max
                    type: dog
                    age: 5
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Pet not found

    put:
      summary: Update a pet
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 1
                name: Fluffy Updated
                type: cat
                age: 4

    delete:
      summary: Delete a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Pet deleted
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Pet not found

  /health:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
              example:
                status: healthy
                timestamp: '2024-01-20T12:00:00Z'

components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
          enum: [cat, dog, bird, fish]
        age:
          type: integer
      required:
        - id
        - name
        - type

    NewPet:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [cat, dog, bird, fish]
        age:
          type: integer
      required:
        - name
        - type

    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error